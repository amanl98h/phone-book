{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\goit-react-hw-02-phonebook-main\\\\src\\\\components\\\\ContactForm\\\\ContactForm.js\";\nimport React, { Component } from 'react';\nimport { nanoid } from 'nanoid';\nimport s from './ContactForm.module.css';\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ContactForm extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      name: '',\n      number: '',\n      email: '',\n      city: ''\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.props.onSubmit(this.state);\n      this.reset();\n    };\n\n    this.reset = () => {\n      this.setState({\n        name: '',\n        number: '',\n        email: '',\n        city: ''\n      });\n    };\n\n    this.handleChange = e => {\n      const {\n        name,\n        value\n      } = e.currentTarget;\n      this.setState({\n        [name]: value,\n        id: nanoid()\n      });\n    };\n  }\n\n  render() {\n    const {\n      name,\n      number,\n      email,\n      city\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      className: s.form,\n      onSubmit: this.handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: s.label,\n        children: [\"Name\", /*#__PURE__*/_jsxDEV(\"input\", {\n          className: s.input,\n          type: \"text\",\n          onChange: this.handleChange,\n          name: \"name\",\n          value: name,\n          pattern: \"^[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]+(([' -][a-zA-Z\\u0430-\\u044F\\u0410-\\u042F ])?[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]*)*$\",\n          title: \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: s.label,\n        children: [\"Number\", /*#__PURE__*/_jsxDEV(\"input\", {\n          className: s.input,\n          type: \"tel\",\n          onChange: this.handleChange,\n          name: \"number\",\n          value: number,\n          pattern: \"\\\\+?\\\\d{1,4}?[-.\\\\s]?\\\\(?\\\\d{1,3}?\\\\)?[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,9}\",\n          title: \"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: s.label,\n        children: [\"Email\", /*#__PURE__*/_jsxDEV(\"input\", {\n          className: s.input,\n          type: \"text\",\n          onChange: this.handleChange,\n          name: \"email\",\n          value: email,\n          pattern: \"^[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]+(([' -][a-zA-Z\\u0430-\\u044F\\u0410-\\u042F ])?[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]*)*$\",\n          title: \"email may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: s.label,\n        children: [\"City\", /*#__PURE__*/_jsxDEV(\"input\", {\n          className: s.input,\n          type: \"text\",\n          onChange: this.handleChange,\n          name: \"city\",\n          value: city,\n          pattern: \"^[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]+(([' -][a-zA-Z\\u0430-\\u044F\\u0410-\\u042F ])?[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]*)*$\",\n          title: \"city may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: s.btn,\n        type: \"submit\",\n        children: \"Add contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nContactForm.propTypes = {\n  name: PropTypes.string,\n  number: PropTypes.number,\n  email: PropTypes.string,\n  city: PropTypes.string\n};\nexport default ContactForm;","map":{"version":3,"sources":["C:/Users/user/Desktop/goit-react-hw-02-phonebook-main/src/components/ContactForm/ContactForm.js"],"names":["React","Component","nanoid","s","PropTypes","ContactForm","state","name","number","email","city","handleSubmit","e","preventDefault","props","onSubmit","reset","setState","handleChange","value","currentTarget","id","render","form","label","input","btn","propTypes","string"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { nanoid } from 'nanoid';\nimport s from './ContactForm.module.css';\nimport PropTypes from 'prop-types';\n\nclass ContactForm extends Component {\n  state = {\n    name: '',\n    number: '',\n    email: '',\n    city: '',\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.onSubmit(this.state);\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({\n      name: '',\n      number: '',\n      email: '',\n      city: '',\n    });\n  };\n\n  handleChange = e => {\n    const { name, value } = e.currentTarget;\n    this.setState({\n      [name]: value,\n      id: nanoid(),\n    });\n  };\n\n  render() {\n    const { name, number, email, city } = this.state;\n    return (\n      <form className={s.form} onSubmit={this.handleSubmit}>\n        <label className={s.label}>\n          Name\n          <input\n            className={s.input}\n            type=\"text\"\n            onChange={this.handleChange}\n            name=\"name\"\n            value={name}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </label>\n\n        <label className={s.label}>\n          Number\n          <input\n            className={s.input}\n            type=\"tel\"\n            onChange={this.handleChange}\n            name=\"number\"\n            value={number}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </label>\n        <label className={s.label}>\n          Email\n          <input\n            className={s.input}\n            type=\"text\"\n            onChange={this.handleChange}\n            name=\"email\"\n            value={email}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"email may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </label>\n\n        <label className={s.label}>\n          City\n          <input\n            className={s.input}\n            type=\"text\"\n            onChange={this.handleChange}\n            name=\"city\"\n            value={city}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"city may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </label>\n        <button className={s.btn} type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nContactForm.propTypes = {\n  name: PropTypes.string,\n  number: PropTypes.number,\n  email: PropTypes.string,\n  city: PropTypes.string,\n};\nexport default ContactForm;\n"]},"metadata":{},"sourceType":"module"}